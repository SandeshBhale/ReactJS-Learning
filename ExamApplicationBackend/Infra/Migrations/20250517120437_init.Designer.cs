// <auto-generated />
using System;
using Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(ExamContext))]
    [Migration("20250517120437_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Admin", b =>
                {
                    b.Property<long>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdminId"));

                    b.Property<string>("EmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("AdminTable");
                });

            modelBuilder.Entity("Core.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionId"));

                    b.Property<string>("QuestionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TopicId")
                        .HasColumnType("bigint");

                    b.HasKey("QuestionId");

                    b.HasIndex("TopicId");

                    b.ToTable("QuestionTable");
                });

            modelBuilder.Entity("Core.QuestionDB", b =>
                {
                    b.Property<long>("QuestionDBId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionDBId"));

                    b.Property<string>("QuesionDBName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionDBId");

                    b.ToTable("QuestionDBTable");
                });

            modelBuilder.Entity("Core.QuestionOption", b =>
                {
                    b.Property<long>("QuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionOptionId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("Option")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptionTable");
                });

            modelBuilder.Entity("Core.ScheduledExam", b =>
                {
                    b.Property<long>("ScheduledExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ScheduledExamId"));

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MarksPerQuestion")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("TotalNumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<bool>("isNegetive")
                        .HasColumnType("bit");

                    b.HasKey("ScheduledExamId");

                    b.ToTable("ScheduledExamTable");
                });

            modelBuilder.Entity("Core.ScheduledExamResult", b =>
                {
                    b.Property<long>("ScheduledExamResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ScheduledExamResultId"));

                    b.Property<DateTime>("AppearDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NegetiveMarks")
                        .HasColumnType("int");

                    b.Property<int>("ObtainedMarks")
                        .HasColumnType("int");

                    b.Property<int>("PositiveMarks")
                        .HasColumnType("int");

                    b.Property<int>("SolvedQuestions")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ScheduledExamResultId");

                    b.HasIndex("UserId");

                    b.ToTable("ScheduledExamResultTable");
                });

            modelBuilder.Entity("Core.ScheduledExamSubject", b =>
                {
                    b.Property<long>("SchedulesExamSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SchedulesExamSubjectId"));

                    b.Property<int>("NoOfQuestions")
                        .HasColumnType("int");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.HasKey("SchedulesExamSubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ScheduledExamSubjectTable");
                });

            modelBuilder.Entity("Core.Subject", b =>
                {
                    b.Property<long>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubjectId"));

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.ToTable("SubjectTable");
                });

            modelBuilder.Entity("Core.Topic", b =>
                {
                    b.Property<long>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TopicId"));

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TopicTable");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("EmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTable");
                });

            modelBuilder.Entity("Core.Question", b =>
                {
                    b.HasOne("Core.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Core.QuestionOption", b =>
                {
                    b.HasOne("Core.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Core.ScheduledExamResult", b =>
                {
                    b.HasOne("Core.User", "User")
                        .WithMany("ScheduledExamResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.ScheduledExamSubject", b =>
                {
                    b.HasOne("Core.Subject", "Subject")
                        .WithMany("ScheduledExamSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Core.Topic", b =>
                {
                    b.HasOne("Core.Subject", "Subject")
                        .WithMany("Topics")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Core.Question", b =>
                {
                    b.Navigation("QuestionOptions");
                });

            modelBuilder.Entity("Core.Subject", b =>
                {
                    b.Navigation("ScheduledExamSubjects");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Core.Topic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Navigation("ScheduledExamResults");
                });
#pragma warning restore 612, 618
        }
    }
}
